import React, { useEffect, useState } from "react";
export var TickType;
(function (TickType) {
    TickType[TickType["MECHANICAL"] = 0] = "MECHANICAL";
    TickType[TickType["QUARTZ"] = 1] = "QUARTZ";
})(TickType || (TickType = {}));
var ONE_SECOND = 1000;
var TEN_MILLISECONDS = 10;
// standard values
var StandardValues = {
    width: '100%',
    tickType: TickType.MECHANICAL,
    fixedDate: undefined,
    showSecondsHand: true,
    showCenterDot: true,
    showLogo: false,
    faceColor: '#0e0e10',
    faceBackgroundColor: '#fff',
    secondsHandColor: '#eb0000',
    minutesHandColor: '#0e0e10',
    hoursHandColor: '#0e0e10'
};
export function MondaineClock(props) {
    var _a = props.width, width = _a === void 0 ? StandardValues.width : _a, _b = props.tickType, tickType = _b === void 0 ? StandardValues.tickType : _b, _c = props.fixedDate, fixedDate = _c === void 0 ? StandardValues.fixedDate : _c, _d = props.showSecondsHand, showSecondsHand = _d === void 0 ? StandardValues.showSecondsHand : _d, _e = props.showCenterDot, showCenterDot = _e === void 0 ? StandardValues.showCenterDot : _e, _f = props.showLogo, showLogo = _f === void 0 ? StandardValues.showLogo : _f, _g = props.faceColor, faceColor = _g === void 0 ? StandardValues.faceColor : _g, _h = props.faceBackgroundColor, faceBackgroundColor = _h === void 0 ? StandardValues.faceBackgroundColor : _h, _j = props.secondsHandColor, secondsHandColor = _j === void 0 ? StandardValues.secondsHandColor : _j, _k = props.minutesHandColor, minutesHandColor = _k === void 0 ? StandardValues.minutesHandColor : _k, _l = props.hoursHandColor, hoursHandColor = _l === void 0 ? StandardValues.hoursHandColor : _l;
    var _m = useState(fixedDate ? fixedDate : new Date()), time = _m[0], setTime = _m[1];
    useEffect(function () {
        var interval = null;
        if (fixedDate) {
            setTime(fixedDate);
        }
        else {
            interval = setInterval(function () {
                setTime(new Date());
            }, tickType === TickType.QUARTZ ? ONE_SECOND : TEN_MILLISECONDS);
        }
        return function () {
            if (interval) {
                clearInterval(interval);
            }
        };
    }, [
        fixedDate,
        tickType,
    ]);
    var renderHourHand = function () {
        var hours = time.getHours() + (time.getMinutes() / 60);
        var rotation = "rotate(".concat((360 / 12) * Number(hours), ", 50, 50)");
        return (React.createElement("g", null,
            React.createElement("polygon", { points: '47.4,18 52.6,18 53.2,62 46.8,62', transform: rotation, fill: hoursHandColor })));
    };
    var renderMinuteHandSwiss = function () {
        var seconds = time.getMilliseconds() / ONE_SECOND + time.getSeconds();
        var minutes = time.getMinutes();
        var rotation;
        // make a little bounce animation on second 59.75 to 60
        // bounce for half a degree further then go back to the original position
        if (tickType === TickType.QUARTZ) {
            rotation = "rotate(".concat((360 / 60) * Number(minutes), ", 50, 50)");
        }
        else if (seconds > 59.95) {
            rotation = "rotate(".concat((360 / 60) * (Number(minutes) + .8), ", 50, 50)");
        }
        else if (seconds > 59.90) {
            rotation = "rotate(".concat((360 / 60) * (Number(minutes) + 1.3), ", 50, 50)");
        }
        else {
            rotation = "rotate(".concat((360 / 60) * Number(minutes), ", 50, 50)");
        }
        return (React.createElement("g", null,
            React.createElement("polygon", { points: '48.2,4 51.8,4 52.6,62 47.4,62', transform: rotation, fill: minutesHandColor })));
    };
    var renderSecondHand = function () {
        var seconds;
        if (tickType === TickType.QUARTZ) {
            seconds = Math.round(time.getMilliseconds() / ONE_SECOND + time.getSeconds());
        }
        else {
            seconds = time.getMilliseconds() / ONE_SECOND + time.getSeconds();
        }
        var rotationSpeed = tickType === TickType.QUARTZ ? 60 : 59;
        var rotation = '';
        if (seconds < rotationSpeed) {
            rotation = "rotate(".concat((360 / rotationSpeed) * (seconds), ", 50, 50)");
        }
        return (React.createElement("g", { fill: secondsHandColor, transform: rotation },
            React.createElement("rect", { x: 49.3, y: 18.8, width: 1.4, height: 47.7 }),
            React.createElement("circle", { cx: 50, cy: 18.8, r: 5.25, strokeWidth: 0 }),
            showCenterDot && React.createElement(React.Fragment, null,
                React.createElement("circle", { cx: 50, cy: 50, r: 1.5, strokeWidth: 0 }))));
    };
    var renderWatchFace = function () {
        return React.createElement("svg", { focusable: "false", xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 105 105" },
            React.createElement("g", { className: "face" },
                React.createElement("circle", { cx: "52.5", cy: "52.5", r: "50", fill: faceBackgroundColor }),
                React.createElement("path", { d: "M50.75 4h3.5v12h-3.5zM50.75 89h3.5v12h-3.5zM75.233 9.623l3.03 1.75-6 10.392-3.03-1.75zM32.734 83.233l3.03 1.75-6 10.392-3.03-1.75zM93.628 26.732l1.75 3.031-10.392 6-1.75-3.03zM20.017 69.234l1.75 3.031-10.392 6-1.75-3.03zM101 50.75v3.5H89v-3.5zM16 50.75v3.5H4v-3.5zM95.379 75.232l-1.75 3.031-10.392-6 1.75-3.03zM21.766 32.734l-1.75 3.031-10.392-6 1.75-3.03zM78.267 93.63l-3.03 1.75-6-10.393 3.03-1.75zM35.766 20.015l-3.03 1.75-6-10.392 3.03-1.75z", fill: faceColor }),
                React.createElement("g", null,
                    React.createElement("path", { d: "M56.873 4.19l1.392.147-.366 3.48-1.392-.145zM47.101 97.177l1.393.146-.366 3.481-1.392-.146zM61.896 4.914l1.37.29-.728 3.424-1.37-.29zM42.458 96.366l1.37.29-.728 3.424-1.37-.291zM66.825 6.157l1.332.432-1.082 3.33-1.331-.434zM37.931 95.085l1.332.432-1.082 3.33-1.331-.433zM71.584 7.906l1.28.569-1.424 3.197-1.28-.57zM33.56 93.32l1.278.569-1.423 3.197-1.28-.57zM80.44 12.852l1.133.823-2.058 2.831-1.132-.823zM25.481 88.494l1.133.822-2.057 2.832-1.133-.823zM84.43 15.986l1.04.937-2.342 2.6-1.04-.936zM21.87 85.469l1.04.936-2.341 2.601-1.04-.937zM88.072 19.522l.937 1.04-2.6 2.343-.937-1.04zM18.593 82.088l.937 1.04-2.601 2.342-.937-1.04zM91.328 23.425l.823 1.133-2.832 2.057-.823-1.132zM15.684 78.385l.823 1.132-2.832 2.058-.822-1.133zM96.52 32.128l.57 1.279-3.198 1.423-.57-1.278zM11.109 70.161l.569 1.279-3.197 1.423-.57-1.279zM98.407 36.85l.433 1.332-3.33 1.081-.432-1.331zM9.483 65.74l.432 1.33-3.329 1.082-.432-1.331zM99.795 41.726l.291 1.37-3.423.727-.29-1.37zM8.34 61.17l.292 1.37-3.424.728-.29-1.37zM100.66 46.73l.146 1.393-3.48.366-.147-1.392zM7.674 56.506l.146 1.392-3.48.366-.147-1.392zM100.811 56.873l-.146 1.392-3.48-.365.145-1.393zM7.821 47.101l-.146 1.392-3.48-.365.145-1.393zM100.09 61.895l-.291 1.369-3.424-.728.291-1.369zM8.631 42.46l-.291 1.37-3.423-.728.29-1.37zM98.84 66.827l-.432 1.331-3.329-1.081.433-1.332zM9.918 37.93l-.433 1.331-3.329-1.082.433-1.331zM97.098 71.585l-.569 1.28-3.197-1.424.57-1.28zM11.677 33.558l-.57 1.28-3.197-1.424.57-1.279zM92.149 80.439l-.823 1.133-2.832-2.058.823-1.132zM16.506 25.482l-.823 1.133-2.831-2.057.823-1.133zM89.017 84.431l-.937 1.04-2.6-2.341.936-1.04zM19.528 21.869l-.936 1.04-2.601-2.342.936-1.04zM85.48 88.076l-1.041.936-2.342-2.6 1.04-.937zM22.91 18.59l-1.04.937-2.341-2.601 1.04-.937zM81.574 91.328l-1.133.823-2.057-2.831 1.132-.823zM26.617 15.684l-1.133.823-2.057-2.832 1.132-.823zM72.873 96.524l-1.279.57-1.423-3.198 1.278-.57zM34.838 11.105l-1.279.57-1.423-3.198 1.279-.57zM68.151 98.405l-1.331.432-1.082-3.329 1.332-.432zM39.259 9.485l-1.332.433-1.081-3.33 1.331-.432zM63.272 99.799l-1.369.29-.728-3.422 1.37-.291zM43.83 8.337l-1.369.291-.727-3.423 1.37-.291zM58.27 100.662l-1.393.146-.366-3.48 1.393-.147zM48.494 7.672l-1.392.147-.366-3.481 1.392-.147z", fill: faceColor }))));
    };
    function renderLogo() {
        var logo = React.createElement("svg", { viewBox: "0 0 187 21", xmlns: "http://www.w3.org/2000/svg", width: '29%' },
            React.createElement("g", null,
                React.createElement("path", { d: "M73.06 8.227c-.165-1.49-.993-2.17-2.667-2.17-1.427 0-2.314.658-2.314 1.71 0 .878.556 1.404 1.693 1.622l2.48.46c2.646.48 4.073 1.97 4.073 4.252 0 2.87-2.193 4.71-5.665 4.71-3.678 0-5.785-1.885-5.847-5.195h2.935c.186 1.907 1.073 2.72 3.037 2.72 1.51 0 2.584-.835 2.584-1.995 0-.92-.58-1.49-1.696-1.71l-2.25-.437c-2.875-.57-4.2-1.887-4.2-4.23 0-2.673 2.027-4.382 5.334-4.382 3.245 0 5.25 1.73 5.33 4.644H73.06zM84.594 3.89c3.015 0 4.73 1.36 4.73 3.724 0 1.294-.577 2.257-1.92 3.003 1.714.678 2.44 1.82 2.44 3.704 0 2.563-1.904 4.185-4.92 4.185h-6.49V3.89h6.16zm-.416 5.85c1.468 0 2.317-.613 2.317-1.644 0-1.182-.767-1.732-2.358-1.732h-2.81V9.74h2.85zm.124 6.29c1.716 0 2.564-.637 2.564-1.95 0-1.38-.828-1.997-2.708-1.997h-2.83v3.947h2.974zM98.194 3.89c3.015 0 4.73 1.36 4.73 3.724 0 1.294-.577 2.257-1.92 3.003 1.714.678 2.44 1.82 2.44 3.704 0 2.563-1.903 4.185-4.92 4.185H91.97V3.89h6.224zm-.416 5.85c1.468 0 2.316-.613 2.316-1.644 0-1.182-.766-1.732-2.357-1.732h-2.87V9.74h2.91zm.124 6.29c1.715 0 2.564-.637 2.564-1.95 0-1.38-.828-1.997-2.71-1.997h-2.89v3.947h3.036zM120.96 13.355c-.205 3.353-2.505 5.456-5.956 5.456-3.864 0-6.41-3-6.41-7.58 0-4.56 2.61-7.647 6.47-7.647 3.31 0 5.527 1.95 5.772 5.04h-2.853c-.33-1.665-1.295-2.477-2.897-2.477-2.177 0-3.595 1.97-3.595 5.062 0 3.047 1.398 5.063 3.534 5.063 1.767 0 2.75-.92 3.062-2.915h2.874zm4.89-6.837v3.44h6.08v2.544h-6.08v6.003h-2.878V3.89h9.553v2.628h-6.676zm12.04 0v3.44h6.158v2.544h-6.158v6.003h-2.877V3.89h9.635v2.628h-6.758zM154.414 6.518v3.44h6.22v2.544h-6.22v6.003h-2.898V3.89h9.717v2.628h-6.82zm12.293 0v3.44h6.18v2.544h-6.18v6.003h-2.902V3.89h9.68v2.628h-6.778zm16.73 1.71c-.166-1.492-.993-2.17-2.676-2.17-1.426 0-2.317.657-2.317 1.71 0 .877.56 1.403 1.698 1.62l2.49.46c2.654.482 4.082 1.973 4.082 4.254 0 2.87-2.2 4.71-5.682 4.71-3.69 0-5.8-1.885-5.862-5.195h2.94c.185 1.907 1.08 2.72 3.047 2.72 1.516 0 2.593-.835 2.593-1.995 0-.92-.58-1.49-1.698-1.71l-2.26-.437c-2.883-.57-4.208-1.887-4.208-4.23 0-2.673 2.028-4.382 5.345-4.382 3.255 0 5.268 1.73 5.35 4.644h-2.84z", fill: "#000" }),
                React.createElement("path", { d: "M0 0h59.233v20.603H0V0z", fill: "#EC0000" }),
                React.createElement("path", { d: "M35.186 17.02h3.75l-5.047-5.163h6.265v5.163h2.96v-5.163h6.267l-5.05 5.163h3.752l6.427-6.708-6.426-6.73h-3.752l5.05 5.185h-6.266V3.583h-2.96v5.184h-6.267l5.047-5.184h-3.75l-6.43 6.73 6.43 6.707", fill: "#FFF" })));
        return (React.createElement("g", { transform: 'translate(37, -18)' }, logo));
    }
    return (React.createElement("svg", { viewBox: '0 0 100 100', width: width },
        renderWatchFace(),
        showLogo && renderLogo(),
        renderHourHand(),
        renderMinuteHandSwiss(),
        showSecondsHand && renderSecondHand()));
}
//# sourceMappingURL=mondaine-clock.js.map