import React, { useEffect, useState } from 'react';
import { MondaineClock, TickType } from "./components/mondaine-clock";
var date = new Date();
export var Demo = function () {
    var defaultRed = '#eb0000';
    var defaultHand = '#0e0e10';
    var defaultBackground = '#ffffff';
    var _a = useState(TickType.MECHANICAL), tickType = _a[0], setTickType = _a[1];
    var _b = useState(false), sizeAuto = _b[0], setSizeAuto = _b[1];
    var _c = useState(200), size = _c[0], setSize = _c[1];
    var _d = useState(false), fixDateEnabled = _d[0], setFixDateEnabled = _d[1];
    var _e = useState(date), fixedDate = _e[0], setFixedDate = _e[1];
    var _f = useState(true), showSecondsHand = _f[0], setShowSecondsHand = _f[1];
    var _g = useState(true), showCenterDot = _g[0], setShowCenterDot = _g[1];
    var _h = useState(false), showLogo = _h[0], setShowLogo = _h[1];
    var _j = useState(false), customColors = _j[0], setCustomColors = _j[1];
    var _k = useState(defaultRed), secondsHandColor = _k[0], setSecondsHandColor = _k[1];
    var _l = useState(defaultHand), minutesHandColor = _l[0], setMinutesHandColor = _l[1];
    var _m = useState(defaultHand), hoursHandColor = _m[0], setHoursHandColor = _m[1];
    var _o = useState(defaultHand), faceColor = _o[0], setFaceColor = _o[1];
    var _p = useState(defaultBackground), faceBackgroundColor = _p[0], setFaceBackgroundColor = _p[1];
    var _q = useState(false), copySuccess = _q[0], setCopySuccess = _q[1];
    useEffect(function () {
        var timeout = null;
        if (copySuccess) {
            timeout = setTimeout(function () {
                setCopySuccess(false);
            }, 2000);
        }
        return function () {
            if (timeout) {
                clearTimeout(timeout);
            }
        };
    }, [copySuccess]);
    function handleReset() {
        setTickType(TickType.MECHANICAL);
        setSizeAuto(false);
        setSize(200);
        setFixDateEnabled(false);
        setFixedDate(new Date());
        setCustomColors(false);
        setShowSecondsHand(true);
        setShowCenterDot(true);
        setShowLogo(false);
        setSecondsHandColor(defaultRed);
        setMinutesHandColor(defaultHand);
        setHoursHandColor(defaultHand);
        setFaceColor(defaultHand);
        setFaceBackgroundColor(defaultBackground);
    }
    function handleResetColors() {
        setSecondsHandColor(defaultRed);
        setMinutesHandColor(defaultHand);
        setHoursHandColor(defaultHand);
        setFaceColor(defaultHand);
        setFaceBackgroundColor(defaultBackground);
    }
    var formatTime = function (date) {
        var hours = date.getHours().toString().padStart(2, '0');
        var minutes = date.getMinutes().toString().padStart(2, '0');
        var seconds = date.getSeconds().toString().padStart(2, '0');
        return "".concat(hours, ":").concat(minutes, ":").concat(seconds);
    };
    // Event handler for input change
    var handleTimeChange = function (e) {
        var inputTime = e.target.value;
        var _a = inputTime.split(':').map(Number), hours = _a[0], minutes = _a[1], seconds = _a[2];
        if (!isNaN(hours) && !isNaN(minutes) && !isNaN(seconds)) {
            var newDate = new Date();
            newDate.setHours(hours);
            newDate.setMinutes(minutes);
            newDate.setSeconds(seconds);
            newDate.setMilliseconds(0);
            setFixedDate(newDate);
        }
    };
    return (React.createElement("div", { style: {
            fontFamily: 'Helvetica, Arial, sans-serif'
        } },
        React.createElement("table", { style: {
                textAlign: 'left',
                background: "whitesmoke",
                width: '100%'
            } },
            React.createElement("tbody", null,
                React.createElement("tr", null,
                    React.createElement("th", { style: { width: '200px' } }, "Clock Type"),
                    React.createElement("td", { style: { width: '200px' } },
                        React.createElement("select", { style: { width: '200px' }, value: tickType, onChange: function (e) { return setTickType(parseInt(e.target.value)); } },
                            React.createElement("option", { value: TickType.MECHANICAL }, "Mechanical"),
                            React.createElement("option", { value: TickType.QUARTZ }, "Quartz"))),
                    React.createElement("td", null, tickType === TickType.MECHANICAL &&
                        fixDateEnabled &&
                        'Using Quartz Clock is recommended when using a fixed date.')),
                React.createElement("tr", null,
                    React.createElement("th", null, "Size Auto"),
                    React.createElement("td", null,
                        React.createElement("input", { type: "checkbox", checked: sizeAuto, onChange: function (e) { return setSizeAuto(e.target.checked); } }))),
                React.createElement("tr", null,
                    React.createElement("th", null, "Size"),
                    React.createElement("td", null,
                        React.createElement("input", { style: { width: '200px' }, type: "range", min: 100, max: 800, value: size, onChange: function (e) { return setSize(parseInt(e.target.value)); }, disabled: sizeAuto })),
                    React.createElement("td", null,
                        size,
                        "px")),
                React.createElement("tr", null,
                    React.createElement("th", null, "Fixed Date enabled"),
                    React.createElement("td", null,
                        React.createElement("input", { type: "checkbox", checked: fixDateEnabled, onChange: function (e) { return setFixDateEnabled(e.target.checked); } }))),
                React.createElement("tr", null,
                    React.createElement("th", null, "Date"),
                    React.createElement("td", null,
                        React.createElement("input", { style: { width: '200px' }, type: "time", step: "1", value: formatTime(fixedDate), onChange: handleTimeChange, disabled: !fixDateEnabled }))),
                React.createElement("tr", null,
                    React.createElement("th", null, "Show Seconds Hand"),
                    React.createElement("td", null,
                        React.createElement("input", { type: "checkbox", checked: showSecondsHand, onChange: function (e) { return setShowSecondsHand(e.target.checked); } }))),
                React.createElement("tr", null,
                    React.createElement("th", null, "Show Center Dot"),
                    React.createElement("td", null,
                        React.createElement("input", { type: "checkbox", checked: showCenterDot, onChange: function (e) { return setShowCenterDot(e.target.checked); } }))),
                React.createElement("tr", null,
                    React.createElement("th", null, "Show Logo"),
                    React.createElement("td", null,
                        React.createElement("input", { type: "checkbox", checked: showLogo, onChange: function (e) { return setShowLogo(e.target.checked); } }))),
                React.createElement("tr", null,
                    React.createElement("th", null, "Custom Colors"),
                    React.createElement("td", null,
                        React.createElement("input", { type: "checkbox", checked: customColors, onChange: function (e) {
                                var checked = e.target.checked;
                                if (!checked) {
                                    handleResetColors();
                                }
                                setCustomColors(checked);
                            } }))),
                customColors && (React.createElement(React.Fragment, null,
                    React.createElement("tr", null,
                        React.createElement("th", null, "Seconds Hand Color"),
                        React.createElement("td", null,
                            React.createElement("input", { style: { width: '200px' }, type: "color", value: secondsHandColor, onChange: function (e) { return setSecondsHandColor(e.target.value); } })),
                        React.createElement("td", null, secondsHandColor)),
                    React.createElement("tr", null,
                        React.createElement("th", null, "Minutes Hand Color"),
                        React.createElement("td", null,
                            React.createElement("input", { style: { width: '200px' }, type: "color", value: minutesHandColor, onChange: function (e) { return setMinutesHandColor(e.target.value); } })),
                        React.createElement("td", null, minutesHandColor)),
                    React.createElement("tr", null,
                        React.createElement("th", null, "Hours Hand Color"),
                        React.createElement("td", null,
                            React.createElement("input", { style: { width: '200px' }, type: "color", value: hoursHandColor, onChange: function (e) { return setHoursHandColor(e.target.value); } })),
                        React.createElement("td", null, hoursHandColor)),
                    React.createElement("tr", null,
                        React.createElement("th", null, "Face Color"),
                        React.createElement("td", null,
                            React.createElement("input", { style: { width: '200px' }, type: "color", value: faceColor, onChange: function (e) { return setFaceColor(e.target.value); } })),
                        React.createElement("td", null, faceColor)),
                    React.createElement("tr", null,
                        React.createElement("th", null, "Face Background Color"),
                        React.createElement("td", null,
                            React.createElement("input", { style: { width: '200px' }, type: "color", value: faceBackgroundColor, onChange: function (e) { return setFaceBackgroundColor(e.target.value); } })),
                        React.createElement("td", null, faceBackgroundColor)))),
                React.createElement("tr", null,
                    React.createElement("th", null,
                        React.createElement("button", { onClick: handleReset }, "Reset"))))),
        React.createElement("div", null,
            React.createElement(MondaineClock, { tickType: tickType, width: sizeAuto ? undefined : "".concat(size, "px"), fixedDate: fixDateEnabled ? fixedDate : undefined, showSecondsHand: showSecondsHand, showCenterDot: showCenterDot, showLogo: showLogo, secondsHandColor: secondsHandColor, minutesHandColor: minutesHandColor, hoursHandColor: hoursHandColor, faceColor: faceColor, faceBackgroundColor: faceBackgroundColor })),
        React.createElement("pre", { id: "code", style: {
                background: "whitesmoke",
                fontFamily: 'consolas, monospace',
                fontSize: '12px',
                padding: '10px'
            }, onClick: function () {
                var _a, _b;
                var code = document.getElementById('code');
                if (code) {
                    var range = document.createRange();
                    range.selectNode(code);
                    (_a = window.getSelection()) === null || _a === void 0 ? void 0 : _a.removeAllRanges();
                    (_b = window.getSelection()) === null || _b === void 0 ? void 0 : _b.addRange(range);
                    setCopySuccess(true);
                }
            } },
            '<MondaineClock',
            React.createElement("br", null), "    tickType={TickType.".concat(TickType[tickType], "}"),
            React.createElement("br", null),
            sizeAuto ? null : "    width={'".concat(size, "px'}"),
            sizeAuto ? null : React.createElement("br", null),
            fixDateEnabled ? "    fixedDate={new Date('".concat(fixedDate.toISOString(), "')}") : null,
            fixDateEnabled ? React.createElement("br", null) : null,
            showSecondsHand ? null : "    showSecondsHand={false}",
            showSecondsHand ? null : React.createElement("br", null),
            secondsHandColor === defaultRed ? null : "    secondsHandColor={'".concat(secondsHandColor, "'}"),
            secondsHandColor === defaultRed ? null : React.createElement("br", null),
            showCenterDot ? null : "    showCenterDot={false}",
            showCenterDot ? null : React.createElement("br", null),
            !showLogo ? null : "    showLogo={true}",
            !showLogo ? null : React.createElement("br", null),
            minutesHandColor === defaultHand ? null : "    minutesHandColor={'".concat(minutesHandColor, "'}"),
            minutesHandColor === defaultHand ? null : React.createElement("br", null),
            hoursHandColor === defaultHand ? null : "    hoursHandColor={'".concat(hoursHandColor, "'}"),
            hoursHandColor === defaultHand ? null : React.createElement("br", null),
            faceColor === defaultHand ? null : "    faceColor={'".concat(faceColor, "'}"),
            faceColor === defaultHand ? null : React.createElement("br", null),
            faceBackgroundColor === defaultBackground ? null : "    faceBackgroundColor={'".concat(faceBackgroundColor, "'}"),
            faceBackgroundColor === defaultBackground ? null : React.createElement("br", null),
            '/>'),
        copySuccess ? React.createElement("span", { style: { color: 'green' } }, "Copied!") : null,
        React.createElement("p", null,
            React.createElement("small", null,
                "By ",
                React.createElement("a", { href: "https://github.com/orbitertoad", target: '_blank', rel: "noreferrer" }, "OrbiterToad")))));
};
//# sourceMappingURL=demo.js.map